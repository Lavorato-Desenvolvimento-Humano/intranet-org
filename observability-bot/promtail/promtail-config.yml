server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Logs do backend Spring Boot
  - job_name: backend-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: backend
          service: lavorato-backend
          environment: production
          __path__: /backend-logs/*.log

    pipeline_stages:
      # Extração de timestamp do log
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s+\[(?P<thread>[^\]]+)\]\s+(?P<level>\w+)\s+(?P<logger>[^\s]+)\s+-\s+(?P<message>.*)'

      # Timestamp parsing
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05'

      # Labels para filtros
      - labels:
          level:
          thread:
          logger:

      # Detectar logs de autenticação
      - match:
          selector: '{job="backend"}'
          stages:
            - regex:
                expression: '.*(?i)(login|authentication|auth).*'
            - labels:
                log_type: 'authentication'

      # Detectar logs de erro
      - match:
          selector: '{job="backend"}'
          stages:
            - regex:
                expression: '.*(?i)(error|exception|fail).*'
            - labels:
                log_type: 'error'

      # Detectar logs de banco de dados
      - match:
          selector: '{job="backend"}'
          stages:
            - regex:
                expression: '.*(?i)(sql|database|connection).*'
            - labels:
                log_type: 'database'

  # Logs do Discord Bot
  - job_name: discord-bot-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: discord-bot
          service: observability-bot
          environment: production
          __path__: /app/logs/*.log

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\s+\[(?P<thread>[^\]]+)\]\s+(?P<level>\w+)\s+(?P<logger>[^\s]+)\s+-\s+(?P<message>.*)'

      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05'

      - labels:
          level:
          thread:
          logger:

  # Logs do sistema (syslog, kernel, etc.)
  - job_name: system-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          service: ubuntu-system
          environment: production
          __path__: /var/log/syslog

    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})\s+(?P<hostname>\S+)\s+(?P<process>[^\[]+)(\[(?P<pid>\d+)\])?\:\s*(?P<message>.*)'

      - timestamp:
          source: timestamp
          format: 'Jan 02 15:04:05'

      - labels:
          hostname:
          process:
          pid:

  # Logs do Docker (se disponível)
  - job_name: docker-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          service: docker-containers
          environment: production
          __path__: /var/lib/docker/containers/*/*.log

    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time

      - timestamp:
          source: time
          format: RFC3339Nano

      - labels:
          stream:

      - output:
          source: log