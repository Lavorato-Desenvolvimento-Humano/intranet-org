name: Backend CI/CD

on:
  push:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/backend/**"
      - ".github/workflows/backend-ci-cd.yml"
  pull_request:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/backend/**"

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Construir e Testar Backend
        run: |
          cd apps/backend
          mvn clean verify

      - name: Autenticar no GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Criar e publicar Docker Image
        if: github.event_name != 'pull_request'
        run: |
          cd apps/backend
          IMAGE_TAG=${{ github.ref_name }}
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$REPO_LOWERCASE/backend:$IMAGE_TAG .
          docker push ghcr.io/$REPO_LOWERCASE/backend:$IMAGE_TAG

  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Copiar arquivos de configuração
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/deploy/${{ github.ref_name }}/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -r nginx/conf.d/app.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/deploy/${{ github.ref_name }}/nginx/conf.d/

      - name: Deploy no Servidor
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /opt/deploy/${{ github.ref_name }}
            
            # Substituir variáveis no nginx conf
            export DOMAIN_NAME=$(grep DOMAIN_NAME .env | cut -d '=' -f2)
            envsubst '${DOMAIN_NAME}' < nginx/conf.d/app.conf > nginx/conf.d/app.conf.tmp
            mv nginx/conf.d/app.conf.tmp nginx/conf.d/app.conf
            
            # Atualizar apenas o serviço de backend
            docker-compose pull backend
            docker-compose up -d backend
          EOF
