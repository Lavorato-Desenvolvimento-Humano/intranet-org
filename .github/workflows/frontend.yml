name: Frontend CI/CD

on:
  push:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/frontend/**"
      - ".github/workflows/frontend-ci-cd.yml"
  pull_request:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/frontend/**"

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Instalar dependências com legacy-peer-deps
        run: |
          npm install
          cd apps/frontend
          npm install --package-lock-only
          npm ci
          npm install lucide-react react-hot-toast axios
          npm install --save @ckeditor/ckeditor5-react @ckeditor/ckeditor5-build-classic
          npm install -D @tailwindcss/typography
          npm install date-fns

      - name: Verificar Linting (com tratamento de erro)
        run: |
          cd apps/frontend
          npm run lint || (echo "⚠️ Linting falhou, mas continuando com o build" && true)

      - name: Verificar e Executar Testes (se existirem)
        run: |
          cd apps/frontend
          if grep -q '"test":' package.json; then
            npm test || (echo "⚠️ Testes falharam, mas continuando com o build" && true)
          else
            echo "Nenhum script de teste encontrado no package.json. Pulando etapa de testes."
          fi

      - name: Construir o Frontend
        run: |
          cd apps/frontend
          npm run build

      - name: Autenticar no GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Criar e publicar Docker Image
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_TAG=${{ github.ref_name }}
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          # Usar BuildKit para build mais rápido e eficiente
          DOCKER_BUILDKIT=1 docker build \
            --cache-from ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG \
            -t ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG \
            -f apps/frontend/Dockerfile .

          # Adicionar tag de data para referência
          BUILD_DATE=$(date +%Y%m%d-%H%M%S)
          docker tag ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG-$BUILD_DATE

          # Push das imagens
          docker push ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG
          docker push ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG-$BUILD_DATE

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')

    steps:
      - name: Configurar chave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy no Servidor
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
          # Garantir que a estrutura de diretórios existe
          mkdir -p /opt/deploy/${{ github.ref_name }}
          mkdir -p /opt/deploy/${{ github.ref_name }}/apps/frontend

          # Garantir que o arquivo .env existe
          if [ ! -f "/opt/deploy/${{ github.ref_name }}/.env" ]; then
            # Pode copiar do develop ou criar um novo
            cp /opt/deploy/develop/.env /opt/deploy/${{ github.ref_name }}/ 2>/dev/null || echo "GITHUB_REPOSITORY=${{ github.repository }}" > /opt/deploy/${{ github.ref_name }}/.env
            echo "DEPLOY_ENV=${{ github.ref_name }}" >> /opt/deploy/${{ github.ref_name }}/.env
          fi

          cd /opt/deploy/${{ github.ref_name }}

          # Atualizar o arquivo .env para usar o nome do repositório em minúsculas
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          sed -i "s|GITHUB_REPOSITORY=.*|GITHUB_REPOSITORY=$REPO_LOWERCASE|" .env

          # Pull da imagem
          docker pull ghcr.io/$REPO_LOWERCASE/frontend:${{ github.ref_name }}

          # Restartar apenas o serviço de frontend
          docker-compose stop frontend || true
          docker-compose rm -f frontend || true
          docker-compose up -d frontend

          # Remover imagens antigas não utilizadas (manter apenas as últimas 5)
          docker image prune -af --filter "until=168h" || true
          ENDSSH
