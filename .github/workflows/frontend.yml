name: Frontend CI/CD

on:
  push:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/frontend/**"
      - ".github/workflows/frontend-ci-cd.yml"
  pull_request:
    branches:
      - develop
      - staging
      - main
    paths:
      - "apps/frontend/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Instalar dependências
        run: |
          cd apps/frontend
          npm ci

      - name: Verificar Linting
        run: |
          cd apps/frontend
          npm run lint

      - name: Rodar Testes Frontend
        run: |
          cd apps/frontend
          npm test

      - name: Construir o Frontend
        run: |
          cd apps/frontend
          npm run build

      - name: Autenticar no GitHub Container Registry (GHCR)
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Criar e publicar Docker Image
        if: github.event_name != 'pull_request'
        run: |
          cd apps/frontend
          IMAGE_TAG=${{ github.ref_name }}
          REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG .
          docker push ghcr.io/$REPO_LOWERCASE/frontend:$IMAGE_TAG

  deploy:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')

    steps:
      - name: Deploy no Servidor via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/deploy/${{ github.ref_name }}

            # Atualizar apenas o serviço de frontend
            docker-compose pull frontend
            docker-compose up -d frontend
